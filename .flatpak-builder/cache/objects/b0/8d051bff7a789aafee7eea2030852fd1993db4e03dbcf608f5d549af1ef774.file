/* Sense.c generated by valac 0.54.3, the Vala compiler
 * generated from Sense.vala, do not modify */

#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <glib/gstdio.h>
#include <stdio.h>
#include <gobject/gvaluecollector.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_SENSE (sense_get_type ())
#define SENSE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SENSE, Sense))
#define SENSE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_SENSE, SenseClass))
#define IS_SENSE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SENSE))
#define IS_SENSE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_SENSE))
#define SENSE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SENSE, SenseClass))

typedef struct _Sense Sense;
typedef struct _SenseClass SenseClass;
typedef struct _SensePrivate SensePrivate;

#define SENSE_TYPE_TEMPERATURE (sense_temperature_get_type ())
typedef struct _Sensetemperature Sensetemperature;

#define SENSE_TYPE_CORE (sense_core_get_type ())
typedef struct _Sensecore Sensecore;
#define _g_free0(var) (var = (g_free (var), NULL))
#define _g_array_unref0(var) ((var == NULL) ? NULL : (var = (g_array_unref (var), NULL)))
#define _g_regex_unref0(var) ((var == NULL) ? NULL : (var = (g_regex_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
typedef struct _ParamSpecSense ParamSpecSense;

struct _Sensecore {
	gchar* coreLabel;
	gdouble currentTemp;
};

struct _Sensetemperature {
	gchar* cpuType;
	gdouble averageCoreTemp;
	GArray* rawData;
};

struct _Sense {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SensePrivate * priv;
	Sensetemperature temperatureStruct;
};

struct _SenseClass {
	GTypeClass parent_class;
	void (*finalize) (Sense *self);
};

struct _SensePrivate {
	gdouble totalTemperature;
	gint temperatureCounter;
};

struct _ParamSpecSense {
	GParamSpec parent_instance;
};

static gint Sense_private_offset;
static gpointer sense_parent_class = NULL;

VALA_EXTERN gpointer sense_ref (gpointer instance);
VALA_EXTERN void sense_unref (gpointer instance);
VALA_EXTERN GParamSpec* param_spec_sense (const gchar* name,
                              const gchar* nick,
                              const gchar* blurb,
                              GType object_type,
                              GParamFlags flags);
VALA_EXTERN void value_set_sense (GValue* value,
                      gpointer v_object);
VALA_EXTERN void value_take_sense (GValue* value,
                       gpointer v_object);
VALA_EXTERN gpointer value_get_sense (const GValue* value);
VALA_EXTERN GType sense_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Sense, sense_unref)
VALA_EXTERN GType sense_temperature_get_type (void) G_GNUC_CONST ;
VALA_EXTERN GType sense_core_get_type (void) G_GNUC_CONST ;
VALA_EXTERN Sensecore* sense_core_dup (const Sensecore* self);
VALA_EXTERN void sense_core_free (Sensecore* self);
VALA_EXTERN void sense_core_copy (const Sensecore* self,
                      Sensecore* dest);
VALA_EXTERN void sense_core_destroy (Sensecore* self);
VALA_EXTERN Sensetemperature* sense_temperature_dup (const Sensetemperature* self);
VALA_EXTERN void sense_temperature_free (Sensetemperature* self);
VALA_EXTERN void sense_temperature_copy (const Sensetemperature* self,
                             Sensetemperature* dest);
VALA_EXTERN void sense_temperature_destroy (Sensetemperature* self);
VALA_EXTERN Sense* sense_new (void);
VALA_EXTERN Sense* sense_construct (GType object_type);
static void _sense_core_free0_ (gpointer var);
static void _vala_Sensecore_free_function_content_of (gpointer data);
static void sense_testHwmon (Sense* self);
static gchar* sense_openFile (Sense* self,
                       const gchar* filename);
static void sense_parseRawTemp (Sense* self,
                         const gchar* path);
static void sense_finalize (Sense * obj);
static GType sense_get_type_once (void);

static inline gpointer
sense_get_instance_private (Sense* self)
{
	return G_STRUCT_MEMBER_P (self, Sense_private_offset);
}

static void
_sense_core_free0_ (gpointer var)
{
#line 20 "../src/Libraries/Sense.vala"
	(var == NULL) ? NULL : (var = (sense_core_free (var), NULL));
#line 131 "Sense.c"
}

static void
_vala_Sensecore_free_function_content_of (gpointer data)
{
	Sensecore* self;
#line 20 "../src/Libraries/Sense.vala"
	self = *((Sensecore**) data);
#line 20 "../src/Libraries/Sense.vala"
	_sense_core_free0_ (self);
#line 142 "Sense.c"
}

Sense*
sense_construct (GType object_type)
{
	Sense* self = NULL;
	gchar* _tmp0_;
	GArray* _tmp1_;
	Sensetemperature _tmp2_ = {0};
#line 18 "../src/Libraries/Sense.vala"
	self = (Sense*) g_type_create_instance (object_type);
#line 20 "../src/Libraries/Sense.vala"
	_tmp0_ = g_strdup ("");
#line 20 "../src/Libraries/Sense.vala"
	_tmp1_ = g_array_new (TRUE, TRUE, sizeof (Sensecore*));
#line 20 "../src/Libraries/Sense.vala"
	g_array_set_clear_func (_tmp1_, (GDestroyNotify) _vala_Sensecore_free_function_content_of);
#line 20 "../src/Libraries/Sense.vala"
	_g_free0 (_tmp2_.cpuType);
#line 20 "../src/Libraries/Sense.vala"
	_tmp2_.cpuType = _tmp0_;
#line 20 "../src/Libraries/Sense.vala"
	_tmp2_.averageCoreTemp = (gdouble) 0;
#line 20 "../src/Libraries/Sense.vala"
	_g_array_unref0 (_tmp2_.rawData);
#line 20 "../src/Libraries/Sense.vala"
	_tmp2_.rawData = _tmp1_;
#line 20 "../src/Libraries/Sense.vala"
	sense_temperature_destroy (&self->temperatureStruct);
#line 20 "../src/Libraries/Sense.vala"
	self->temperatureStruct = _tmp2_;
#line 21 "../src/Libraries/Sense.vala"
	sense_testHwmon (self);
#line 18 "../src/Libraries/Sense.vala"
	return self;
#line 178 "Sense.c"
}

Sense*
sense_new (void)
{
#line 18 "../src/Libraries/Sense.vala"
	return sense_construct (TYPE_SENSE);
#line 186 "Sense.c"
}

static gchar*
string_replace (const gchar* self,
                const gchar* old,
                const gchar* replacement)
{
	gboolean _tmp0_ = FALSE;
	gboolean _tmp1_ = FALSE;
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (self != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (old != NULL, NULL);
#line 1534 "glib-2.0.vapi"
	g_return_val_if_fail (replacement != NULL, NULL);
#line 1535 "glib-2.0.vapi"
	if ((*((gchar*) self)) == '\0') {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = TRUE;
#line 208 "Sense.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp1_ = (*((gchar*) old)) == '\0';
#line 212 "Sense.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp1_) {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = TRUE;
#line 218 "Sense.c"
	} else {
#line 1535 "glib-2.0.vapi"
		_tmp0_ = g_strcmp0 (old, replacement) == 0;
#line 222 "Sense.c"
	}
#line 1535 "glib-2.0.vapi"
	if (_tmp0_) {
#line 226 "Sense.c"
		gchar* _tmp2_;
#line 1536 "glib-2.0.vapi"
		_tmp2_ = g_strdup (self);
#line 1536 "glib-2.0.vapi"
		result = _tmp2_;
#line 1536 "glib-2.0.vapi"
		return result;
#line 234 "Sense.c"
	}
	{
		GRegex* regex = NULL;
		gchar* _tmp3_;
		gchar* _tmp4_;
		GRegex* _tmp5_;
		GRegex* _tmp6_;
		gchar* _tmp7_ = NULL;
		GRegex* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
#line 1539 "glib-2.0.vapi"
		_tmp3_ = g_regex_escape_string (old, -1);
#line 1539 "glib-2.0.vapi"
		_tmp4_ = _tmp3_;
#line 1539 "glib-2.0.vapi"
		_tmp5_ = g_regex_new (_tmp4_, 0, 0, &_inner_error0_);
#line 1539 "glib-2.0.vapi"
		_tmp6_ = _tmp5_;
#line 1539 "glib-2.0.vapi"
		_g_free0 (_tmp4_);
#line 1539 "glib-2.0.vapi"
		regex = _tmp6_;
#line 1539 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1539 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 262 "Sense.c"
				goto __catch0_g_regex_error;
			}
#line 1539 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1539 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1539 "glib-2.0.vapi"
			return NULL;
#line 271 "Sense.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp8_ = regex;
#line 1540 "glib-2.0.vapi"
		_tmp9_ = g_regex_replace_literal (_tmp8_, self, (gssize) -1, 0, replacement, 0, &_inner_error0_);
#line 1540 "glib-2.0.vapi"
		_tmp7_ = _tmp9_;
#line 1540 "glib-2.0.vapi"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 1540 "glib-2.0.vapi"
			_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
			if (_inner_error0_->domain == G_REGEX_ERROR) {
#line 285 "Sense.c"
				goto __catch0_g_regex_error;
			}
#line 1540 "glib-2.0.vapi"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1540 "glib-2.0.vapi"
			g_clear_error (&_inner_error0_);
#line 1540 "glib-2.0.vapi"
			return NULL;
#line 294 "Sense.c"
		}
#line 1540 "glib-2.0.vapi"
		_tmp10_ = _tmp7_;
#line 1540 "glib-2.0.vapi"
		_tmp7_ = NULL;
#line 1540 "glib-2.0.vapi"
		result = _tmp10_;
#line 1540 "glib-2.0.vapi"
		_g_free0 (_tmp7_);
#line 1540 "glib-2.0.vapi"
		_g_regex_unref0 (regex);
#line 1540 "glib-2.0.vapi"
		return result;
#line 308 "Sense.c"
	}
	goto __finally0;
	__catch0_g_regex_error:
	{
#line 1538 "glib-2.0.vapi"
		g_clear_error (&_inner_error0_);
#line 1542 "glib-2.0.vapi"
		g_assert_not_reached ();
#line 317 "Sense.c"
	}
	__finally0:
#line 1538 "glib-2.0.vapi"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 1538 "glib-2.0.vapi"
	g_clear_error (&_inner_error0_);
#line 1538 "glib-2.0.vapi"
	return NULL;
#line 326 "Sense.c"
}

static void
sense_testHwmon (Sense* self)
{
	Sensetemperature _tmp0_;
	GArray* _tmp1_;
	gint hwmonCounter = 0;
#line 25 "../src/Libraries/Sense.vala"
	g_return_if_fail (self != NULL);
#line 27 "../src/Libraries/Sense.vala"
	_tmp0_ = self->temperatureStruct;
#line 27 "../src/Libraries/Sense.vala"
	_tmp1_ = _tmp0_.rawData;
#line 27 "../src/Libraries/Sense.vala"
	g_array_set_size (_tmp1_, (guint) 0);
#line 28 "../src/Libraries/Sense.vala"
	hwmonCounter = 0;
#line 30 "../src/Libraries/Sense.vala"
	while (TRUE) {
#line 347 "Sense.c"
		gchar* hwmonNamePath = NULL;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* _tmp4_;
		gchar* _tmp5_;
		const gchar* _tmp6_;
		gchar* cpuName = NULL;
		const gchar* _tmp7_;
		gchar* _tmp8_;
		gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
		gboolean _tmp12_ = FALSE;
		const gchar* _tmp13_;
		gint _tmp21_;
#line 32 "../src/Libraries/Sense.vala"
		_tmp2_ = g_strdup_printf ("%i", hwmonCounter);
#line 32 "../src/Libraries/Sense.vala"
		_tmp3_ = _tmp2_;
#line 32 "../src/Libraries/Sense.vala"
		_tmp4_ = g_strconcat ("/sys/class/hwmon/hwmon", _tmp3_, "/name", NULL);
#line 32 "../src/Libraries/Sense.vala"
		_tmp5_ = _tmp4_;
#line 32 "../src/Libraries/Sense.vala"
		_g_free0 (_tmp3_);
#line 32 "../src/Libraries/Sense.vala"
		hwmonNamePath = _tmp5_;
#line 37 "../src/Libraries/Sense.vala"
		_tmp6_ = hwmonNamePath;
#line 37 "../src/Libraries/Sense.vala"
		if (!g_file_test (_tmp6_, G_FILE_TEST_EXISTS)) {
#line 38 "../src/Libraries/Sense.vala"
			_g_free0 (hwmonNamePath);
#line 38 "../src/Libraries/Sense.vala"
			break;
#line 383 "Sense.c"
		}
#line 41 "../src/Libraries/Sense.vala"
		_tmp7_ = hwmonNamePath;
#line 41 "../src/Libraries/Sense.vala"
		_tmp8_ = sense_openFile (self, _tmp7_);
#line 41 "../src/Libraries/Sense.vala"
		_tmp9_ = _tmp8_;
#line 41 "../src/Libraries/Sense.vala"
		_tmp10_ = string_replace (_tmp9_, "\n", "");
#line 41 "../src/Libraries/Sense.vala"
		_tmp11_ = _tmp10_;
#line 41 "../src/Libraries/Sense.vala"
		_g_free0 (_tmp9_);
#line 41 "../src/Libraries/Sense.vala"
		cpuName = _tmp11_;
#line 44 "../src/Libraries/Sense.vala"
		_tmp13_ = cpuName;
#line 44 "../src/Libraries/Sense.vala"
		if (g_strcmp0 (_tmp13_, "coretemp") == 0) {
#line 44 "../src/Libraries/Sense.vala"
			_tmp12_ = TRUE;
#line 405 "Sense.c"
		} else {
			const gchar* _tmp14_;
#line 44 "../src/Libraries/Sense.vala"
			_tmp14_ = cpuName;
#line 44 "../src/Libraries/Sense.vala"
			_tmp12_ = g_strcmp0 (_tmp14_, "k10temp") == 0;
#line 412 "Sense.c"
		}
#line 44 "../src/Libraries/Sense.vala"
		if (_tmp12_) {
#line 416 "Sense.c"
			const gchar* _tmp15_;
			gchar* _tmp16_;
			gchar* _tmp17_;
			gchar* _tmp18_;
			gchar* _tmp19_;
			gchar* _tmp20_;
#line 46 "../src/Libraries/Sense.vala"
			_tmp15_ = cpuName;
#line 46 "../src/Libraries/Sense.vala"
			_tmp16_ = g_strdup (_tmp15_);
#line 46 "../src/Libraries/Sense.vala"
			_g_free0 (self->temperatureStruct.cpuType);
#line 46 "../src/Libraries/Sense.vala"
			self->temperatureStruct.cpuType = _tmp16_;
#line 47 "../src/Libraries/Sense.vala"
			_tmp17_ = g_strdup_printf ("%i", hwmonCounter);
#line 47 "../src/Libraries/Sense.vala"
			_tmp18_ = _tmp17_;
#line 47 "../src/Libraries/Sense.vala"
			_tmp19_ = g_strconcat ("/sys/class/hwmon/hwmon", _tmp18_, "/", NULL);
#line 47 "../src/Libraries/Sense.vala"
			_tmp20_ = _tmp19_;
#line 47 "../src/Libraries/Sense.vala"
			sense_parseRawTemp (self, _tmp20_);
#line 47 "../src/Libraries/Sense.vala"
			_g_free0 (_tmp20_);
#line 47 "../src/Libraries/Sense.vala"
			_g_free0 (_tmp18_);
#line 445 "Sense.c"
		}
#line 53 "../src/Libraries/Sense.vala"
		_tmp21_ = hwmonCounter;
#line 53 "../src/Libraries/Sense.vala"
		hwmonCounter = _tmp21_ + 1;
#line 30 "../src/Libraries/Sense.vala"
		_g_free0 (cpuName);
#line 30 "../src/Libraries/Sense.vala"
		_g_free0 (hwmonNamePath);
#line 455 "Sense.c"
	}
}

static gdouble
double_parse (const gchar* str)
{
	gdouble result = 0.0;
#line 995 "glib-2.0.vapi"
	g_return_val_if_fail (str != NULL, 0.0);
#line 996 "glib-2.0.vapi"
	result = g_ascii_strtod (str, NULL);
#line 996 "glib-2.0.vapi"
	return result;
#line 469 "Sense.c"
}

static gpointer
_sense_core_dup0 (gpointer self)
{
#line 84 "../src/Libraries/Sense.vala"
	return self ? sense_core_dup (self) : NULL;
#line 477 "Sense.c"
}

static void
sense_parseRawTemp (Sense* self,
                    const gchar* path)
{
#line 59 "../src/Libraries/Sense.vala"
	g_return_if_fail (self != NULL);
#line 59 "../src/Libraries/Sense.vala"
	g_return_if_fail (path != NULL);
#line 61 "../src/Libraries/Sense.vala"
	while (TRUE) {
#line 490 "Sense.c"
		gchar* coreTemperaturePath = NULL;
		gchar* _tmp0_;
		gchar* _tmp1_;
		gchar* _tmp2_;
		gchar* _tmp3_;
		gchar* coreLabelPath = NULL;
		gchar* _tmp4_;
		gchar* _tmp5_;
		gchar* _tmp6_;
		gchar* _tmp7_;
		const gchar* _tmp8_;
		gdouble coreTemperature = 0.0;
		const gchar* _tmp9_;
		gchar* _tmp10_;
		gchar* _tmp11_;
		gdouble _tmp12_;
		gchar* coreLabel = NULL;
		const gchar* _tmp13_;
		gchar* _tmp14_;
		gchar* _tmp15_;
		gchar* _tmp16_;
		gchar* _tmp17_;
		gint _tmp18_;
		Sensecore core = {0};
		const gchar* _tmp19_;
		gchar* _tmp20_;
		Sensecore _tmp21_ = {0};
		Sensetemperature _tmp22_;
		GArray* _tmp23_;
		Sensecore _tmp24_;
		Sensecore _tmp25_;
		Sensecore* _tmp26_;
#line 63 "../src/Libraries/Sense.vala"
		_tmp0_ = g_strdup_printf ("%i", self->priv->temperatureCounter);
#line 63 "../src/Libraries/Sense.vala"
		_tmp1_ = _tmp0_;
#line 63 "../src/Libraries/Sense.vala"
		_tmp2_ = g_strconcat (path, "temp", _tmp1_, "_input", NULL);
#line 63 "../src/Libraries/Sense.vala"
		_tmp3_ = _tmp2_;
#line 63 "../src/Libraries/Sense.vala"
		_g_free0 (_tmp1_);
#line 63 "../src/Libraries/Sense.vala"
		coreTemperaturePath = _tmp3_;
#line 68 "../src/Libraries/Sense.vala"
		_tmp4_ = g_strdup_printf ("%i", self->priv->temperatureCounter);
#line 68 "../src/Libraries/Sense.vala"
		_tmp5_ = _tmp4_;
#line 68 "../src/Libraries/Sense.vala"
		_tmp6_ = g_strconcat (path, "temp", _tmp5_, "_label", NULL);
#line 68 "../src/Libraries/Sense.vala"
		_tmp7_ = _tmp6_;
#line 68 "../src/Libraries/Sense.vala"
		_g_free0 (_tmp5_);
#line 68 "../src/Libraries/Sense.vala"
		coreLabelPath = _tmp7_;
#line 74 "../src/Libraries/Sense.vala"
		_tmp8_ = coreTemperaturePath;
#line 74 "../src/Libraries/Sense.vala"
		if (!g_file_test (_tmp8_, G_FILE_TEST_EXISTS)) {
#line 75 "../src/Libraries/Sense.vala"
			_g_free0 (coreLabelPath);
#line 75 "../src/Libraries/Sense.vala"
			_g_free0 (coreTemperaturePath);
#line 75 "../src/Libraries/Sense.vala"
			break;
#line 557 "Sense.c"
		}
#line 77 "../src/Libraries/Sense.vala"
		_tmp9_ = coreTemperaturePath;
#line 77 "../src/Libraries/Sense.vala"
		_tmp10_ = sense_openFile (self, _tmp9_);
#line 77 "../src/Libraries/Sense.vala"
		_tmp11_ = _tmp10_;
#line 77 "../src/Libraries/Sense.vala"
		_tmp12_ = double_parse (_tmp11_);
#line 77 "../src/Libraries/Sense.vala"
		_g_free0 (_tmp11_);
#line 77 "../src/Libraries/Sense.vala"
		coreTemperature = _tmp12_;
#line 78 "../src/Libraries/Sense.vala"
		_tmp13_ = coreLabelPath;
#line 78 "../src/Libraries/Sense.vala"
		_tmp14_ = sense_openFile (self, _tmp13_);
#line 78 "../src/Libraries/Sense.vala"
		_tmp15_ = _tmp14_;
#line 78 "../src/Libraries/Sense.vala"
		_tmp16_ = string_replace (_tmp15_, "\n", "");
#line 78 "../src/Libraries/Sense.vala"
		_tmp17_ = _tmp16_;
#line 78 "../src/Libraries/Sense.vala"
		_g_free0 (_tmp15_);
#line 78 "../src/Libraries/Sense.vala"
		coreLabel = _tmp17_;
#line 80 "../src/Libraries/Sense.vala"
		self->priv->totalTemperature = self->priv->totalTemperature + coreTemperature;
#line 81 "../src/Libraries/Sense.vala"
		_tmp18_ = self->priv->temperatureCounter;
#line 81 "../src/Libraries/Sense.vala"
		self->priv->temperatureCounter = _tmp18_ + 1;
#line 82 "../src/Libraries/Sense.vala"
		_tmp19_ = coreLabel;
#line 82 "../src/Libraries/Sense.vala"
		_tmp20_ = g_strdup (_tmp19_);
#line 82 "../src/Libraries/Sense.vala"
		_g_free0 (_tmp21_.coreLabel);
#line 82 "../src/Libraries/Sense.vala"
		_tmp21_.coreLabel = _tmp20_;
#line 82 "../src/Libraries/Sense.vala"
		_tmp21_.currentTemp = coreTemperature;
#line 82 "../src/Libraries/Sense.vala"
		core = _tmp21_;
#line 84 "../src/Libraries/Sense.vala"
		_tmp22_ = self->temperatureStruct;
#line 84 "../src/Libraries/Sense.vala"
		_tmp23_ = _tmp22_.rawData;
#line 84 "../src/Libraries/Sense.vala"
		_tmp24_ = core;
#line 84 "../src/Libraries/Sense.vala"
		_tmp25_ = _tmp24_;
#line 84 "../src/Libraries/Sense.vala"
		_tmp26_ = _sense_core_dup0 (&_tmp25_);
#line 84 "../src/Libraries/Sense.vala"
		g_array_append_val (_tmp23_, _tmp26_);
#line 85 "../src/Libraries/Sense.vala"
		self->temperatureStruct.averageCoreTemp = self->priv->totalTemperature / (self->priv->temperatureCounter - 1);
#line 61 "../src/Libraries/Sense.vala"
		sense_core_destroy (&core);
#line 61 "../src/Libraries/Sense.vala"
		_g_free0 (coreLabel);
#line 61 "../src/Libraries/Sense.vala"
		_g_free0 (coreLabelPath);
#line 61 "../src/Libraries/Sense.vala"
		_g_free0 (coreTemperaturePath);
#line 625 "Sense.c"
	}
}

static gchar*
sense_openFile (Sense* self,
                const gchar* filename)
{
	GError* _inner_error0_ = NULL;
	gchar* result = NULL;
#line 92 "../src/Libraries/Sense.vala"
	g_return_val_if_fail (self != NULL, NULL);
#line 92 "../src/Libraries/Sense.vala"
	g_return_val_if_fail (filename != NULL, NULL);
#line 639 "Sense.c"
	{
		gchar* read = NULL;
		gchar* _tmp0_ = NULL;
#line 97 "../src/Libraries/Sense.vala"
		g_file_get_contents (filename, &_tmp0_, NULL, &_inner_error0_);
#line 97 "../src/Libraries/Sense.vala"
		_g_free0 (read);
#line 97 "../src/Libraries/Sense.vala"
		read = _tmp0_;
#line 97 "../src/Libraries/Sense.vala"
		if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 97 "../src/Libraries/Sense.vala"
			_g_free0 (read);
#line 97 "../src/Libraries/Sense.vala"
			if (_inner_error0_->domain == G_FILE_ERROR) {
#line 655 "Sense.c"
				goto __catch0_g_file_error;
			}
#line 97 "../src/Libraries/Sense.vala"
			g_critical ("file %s: line %d: unexpected error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 97 "../src/Libraries/Sense.vala"
			g_clear_error (&_inner_error0_);
#line 97 "../src/Libraries/Sense.vala"
			return NULL;
#line 664 "Sense.c"
		}
#line 99 "../src/Libraries/Sense.vala"
		result = read;
#line 99 "../src/Libraries/Sense.vala"
		return result;
#line 670 "Sense.c"
	}
	goto __finally0;
	__catch0_g_file_error:
	{
		GError* e = NULL;
		FILE* _tmp1_;
		GError* _tmp2_;
		const gchar* _tmp3_;
		gchar* _tmp4_;
#line 94 "../src/Libraries/Sense.vala"
		e = _inner_error0_;
#line 94 "../src/Libraries/Sense.vala"
		_inner_error0_ = NULL;
#line 103 "../src/Libraries/Sense.vala"
		_tmp1_ = stderr;
#line 103 "../src/Libraries/Sense.vala"
		_tmp2_ = e;
#line 103 "../src/Libraries/Sense.vala"
		_tmp3_ = _tmp2_->message;
#line 103 "../src/Libraries/Sense.vala"
		fprintf (_tmp1_, "%s\n", _tmp3_);
#line 104 "../src/Libraries/Sense.vala"
		_tmp4_ = g_strdup ("0");
#line 104 "../src/Libraries/Sense.vala"
		result = _tmp4_;
#line 104 "../src/Libraries/Sense.vala"
		_g_error_free0 (e);
#line 104 "../src/Libraries/Sense.vala"
		return result;
#line 700 "Sense.c"
	}
	__finally0:
#line 94 "../src/Libraries/Sense.vala"
	g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 94 "../src/Libraries/Sense.vala"
	g_clear_error (&_inner_error0_);
#line 94 "../src/Libraries/Sense.vala"
	return NULL;
#line 709 "Sense.c"
}

void
sense_core_copy (const Sensecore* self,
                 Sensecore* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
#line 3 "../src/Libraries/Sense.vala"
	_tmp0_ = (*self).coreLabel;
#line 3 "../src/Libraries/Sense.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 3 "../src/Libraries/Sense.vala"
	_g_free0 ((*dest).coreLabel);
#line 3 "../src/Libraries/Sense.vala"
	(*dest).coreLabel = _tmp1_;
#line 3 "../src/Libraries/Sense.vala"
	(*dest).currentTemp = (*self).currentTemp;
#line 728 "Sense.c"
}

void
sense_core_destroy (Sensecore* self)
{
#line 4 "../src/Libraries/Sense.vala"
	_g_free0 ((*self).coreLabel);
#line 736 "Sense.c"
}

Sensecore*
sense_core_dup (const Sensecore* self)
{
	Sensecore* dup;
#line 3 "../src/Libraries/Sense.vala"
	dup = g_new0 (Sensecore, 1);
#line 3 "../src/Libraries/Sense.vala"
	sense_core_copy (self, dup);
#line 3 "../src/Libraries/Sense.vala"
	return dup;
#line 749 "Sense.c"
}

void
sense_core_free (Sensecore* self)
{
#line 3 "../src/Libraries/Sense.vala"
	sense_core_destroy (self);
#line 3 "../src/Libraries/Sense.vala"
	g_free (self);
#line 759 "Sense.c"
}

static GType
sense_core_get_type_once (void)
{
	GType sense_core_type_id;
	sense_core_type_id = g_boxed_type_register_static ("Sensecore", (GBoxedCopyFunc) sense_core_dup, (GBoxedFreeFunc) sense_core_free);
	return sense_core_type_id;
}

GType
sense_core_get_type (void)
{
	static volatile gsize sense_core_type_id__volatile = 0;
	if (g_once_init_enter (&sense_core_type_id__volatile)) {
		GType sense_core_type_id;
		sense_core_type_id = sense_core_get_type_once ();
		g_once_init_leave (&sense_core_type_id__volatile, sense_core_type_id);
	}
	return sense_core_type_id__volatile;
}

static gpointer
_g_array_ref0 (gpointer self)
{
#line 8 "../src/Libraries/Sense.vala"
	return self ? g_array_ref (self) : NULL;
#line 787 "Sense.c"
}

void
sense_temperature_copy (const Sensetemperature* self,
                        Sensetemperature* dest)
{
	const gchar* _tmp0_;
	gchar* _tmp1_;
	GArray* _tmp2_;
	GArray* _tmp3_;
#line 8 "../src/Libraries/Sense.vala"
	_tmp0_ = (*self).cpuType;
#line 8 "../src/Libraries/Sense.vala"
	_tmp1_ = g_strdup (_tmp0_);
#line 8 "../src/Libraries/Sense.vala"
	_g_free0 ((*dest).cpuType);
#line 8 "../src/Libraries/Sense.vala"
	(*dest).cpuType = _tmp1_;
#line 8 "../src/Libraries/Sense.vala"
	(*dest).averageCoreTemp = (*self).averageCoreTemp;
#line 8 "../src/Libraries/Sense.vala"
	_tmp2_ = (*self).rawData;
#line 8 "../src/Libraries/Sense.vala"
	_tmp3_ = _g_array_ref0 (_tmp2_);
#line 8 "../src/Libraries/Sense.vala"
	_g_array_unref0 ((*dest).rawData);
#line 8 "../src/Libraries/Sense.vala"
	(*dest).rawData = _tmp3_;
#line 816 "Sense.c"
}

void
sense_temperature_destroy (Sensetemperature* self)
{
#line 9 "../src/Libraries/Sense.vala"
	_g_free0 ((*self).cpuType);
#line 11 "../src/Libraries/Sense.vala"
	_g_array_unref0 ((*self).rawData);
#line 826 "Sense.c"
}

Sensetemperature*
sense_temperature_dup (const Sensetemperature* self)
{
	Sensetemperature* dup;
#line 8 "../src/Libraries/Sense.vala"
	dup = g_new0 (Sensetemperature, 1);
#line 8 "../src/Libraries/Sense.vala"
	sense_temperature_copy (self, dup);
#line 8 "../src/Libraries/Sense.vala"
	return dup;
#line 839 "Sense.c"
}

void
sense_temperature_free (Sensetemperature* self)
{
#line 8 "../src/Libraries/Sense.vala"
	sense_temperature_destroy (self);
#line 8 "../src/Libraries/Sense.vala"
	g_free (self);
#line 849 "Sense.c"
}

static GType
sense_temperature_get_type_once (void)
{
	GType sense_temperature_type_id;
	sense_temperature_type_id = g_boxed_type_register_static ("Sensetemperature", (GBoxedCopyFunc) sense_temperature_dup, (GBoxedFreeFunc) sense_temperature_free);
	return sense_temperature_type_id;
}

GType
sense_temperature_get_type (void)
{
	static volatile gsize sense_temperature_type_id__volatile = 0;
	if (g_once_init_enter (&sense_temperature_type_id__volatile)) {
		GType sense_temperature_type_id;
		sense_temperature_type_id = sense_temperature_get_type_once ();
		g_once_init_leave (&sense_temperature_type_id__volatile, sense_temperature_type_id);
	}
	return sense_temperature_type_id__volatile;
}

static void
value_sense_init (GValue* value)
{
#line 1 "../src/Libraries/Sense.vala"
	value->data[0].v_pointer = NULL;
#line 877 "Sense.c"
}

static void
value_sense_free_value (GValue* value)
{
#line 1 "../src/Libraries/Sense.vala"
	if (value->data[0].v_pointer) {
#line 1 "../src/Libraries/Sense.vala"
		sense_unref (value->data[0].v_pointer);
#line 887 "Sense.c"
	}
}

static void
value_sense_copy_value (const GValue* src_value,
                        GValue* dest_value)
{
#line 1 "../src/Libraries/Sense.vala"
	if (src_value->data[0].v_pointer) {
#line 1 "../src/Libraries/Sense.vala"
		dest_value->data[0].v_pointer = sense_ref (src_value->data[0].v_pointer);
#line 899 "Sense.c"
	} else {
#line 1 "../src/Libraries/Sense.vala"
		dest_value->data[0].v_pointer = NULL;
#line 903 "Sense.c"
	}
}

static gpointer
value_sense_peek_pointer (const GValue* value)
{
#line 1 "../src/Libraries/Sense.vala"
	return value->data[0].v_pointer;
#line 912 "Sense.c"
}

static gchar*
value_sense_collect_value (GValue* value,
                           guint n_collect_values,
                           GTypeCValue* collect_values,
                           guint collect_flags)
{
#line 1 "../src/Libraries/Sense.vala"
	if (collect_values[0].v_pointer) {
#line 923 "Sense.c"
		Sense * object;
		object = collect_values[0].v_pointer;
#line 1 "../src/Libraries/Sense.vala"
		if (object->parent_instance.g_class == NULL) {
#line 1 "../src/Libraries/Sense.vala"
			return g_strconcat ("invalid unclassed object pointer for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 930 "Sense.c"
		} else if (!g_value_type_compatible (G_TYPE_FROM_INSTANCE (object), G_VALUE_TYPE (value))) {
#line 1 "../src/Libraries/Sense.vala"
			return g_strconcat ("invalid object type `", g_type_name (G_TYPE_FROM_INSTANCE (object)), "' for value type `", G_VALUE_TYPE_NAME (value), "'", NULL);
#line 934 "Sense.c"
		}
#line 1 "../src/Libraries/Sense.vala"
		value->data[0].v_pointer = sense_ref (object);
#line 938 "Sense.c"
	} else {
#line 1 "../src/Libraries/Sense.vala"
		value->data[0].v_pointer = NULL;
#line 942 "Sense.c"
	}
#line 1 "../src/Libraries/Sense.vala"
	return NULL;
#line 946 "Sense.c"
}

static gchar*
value_sense_lcopy_value (const GValue* value,
                         guint n_collect_values,
                         GTypeCValue* collect_values,
                         guint collect_flags)
{
	Sense ** object_p;
	object_p = collect_values[0].v_pointer;
#line 1 "../src/Libraries/Sense.vala"
	if (!object_p) {
#line 1 "../src/Libraries/Sense.vala"
		return g_strdup_printf ("value location for `%s' passed as NULL", G_VALUE_TYPE_NAME (value));
#line 961 "Sense.c"
	}
#line 1 "../src/Libraries/Sense.vala"
	if (!value->data[0].v_pointer) {
#line 1 "../src/Libraries/Sense.vala"
		*object_p = NULL;
#line 967 "Sense.c"
	} else if (collect_flags & G_VALUE_NOCOPY_CONTENTS) {
#line 1 "../src/Libraries/Sense.vala"
		*object_p = value->data[0].v_pointer;
#line 971 "Sense.c"
	} else {
#line 1 "../src/Libraries/Sense.vala"
		*object_p = sense_ref (value->data[0].v_pointer);
#line 975 "Sense.c"
	}
#line 1 "../src/Libraries/Sense.vala"
	return NULL;
#line 979 "Sense.c"
}

GParamSpec*
param_spec_sense (const gchar* name,
                  const gchar* nick,
                  const gchar* blurb,
                  GType object_type,
                  GParamFlags flags)
{
	ParamSpecSense* spec;
#line 1 "../src/Libraries/Sense.vala"
	g_return_val_if_fail (g_type_is_a (object_type, TYPE_SENSE), NULL);
#line 1 "../src/Libraries/Sense.vala"
	spec = g_param_spec_internal (G_TYPE_PARAM_OBJECT, name, nick, blurb, flags);
#line 1 "../src/Libraries/Sense.vala"
	G_PARAM_SPEC (spec)->value_type = object_type;
#line 1 "../src/Libraries/Sense.vala"
	return G_PARAM_SPEC (spec);
#line 998 "Sense.c"
}

gpointer
value_get_sense (const GValue* value)
{
#line 1 "../src/Libraries/Sense.vala"
	g_return_val_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_SENSE), NULL);
#line 1 "../src/Libraries/Sense.vala"
	return value->data[0].v_pointer;
#line 1008 "Sense.c"
}

void
value_set_sense (GValue* value,
                 gpointer v_object)
{
	Sense * old;
#line 1 "../src/Libraries/Sense.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_SENSE));
#line 1 "../src/Libraries/Sense.vala"
	old = value->data[0].v_pointer;
#line 1 "../src/Libraries/Sense.vala"
	if (v_object) {
#line 1 "../src/Libraries/Sense.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_SENSE));
#line 1 "../src/Libraries/Sense.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 1 "../src/Libraries/Sense.vala"
		value->data[0].v_pointer = v_object;
#line 1 "../src/Libraries/Sense.vala"
		sense_ref (value->data[0].v_pointer);
#line 1030 "Sense.c"
	} else {
#line 1 "../src/Libraries/Sense.vala"
		value->data[0].v_pointer = NULL;
#line 1034 "Sense.c"
	}
#line 1 "../src/Libraries/Sense.vala"
	if (old) {
#line 1 "../src/Libraries/Sense.vala"
		sense_unref (old);
#line 1040 "Sense.c"
	}
}

void
value_take_sense (GValue* value,
                  gpointer v_object)
{
	Sense * old;
#line 1 "../src/Libraries/Sense.vala"
	g_return_if_fail (G_TYPE_CHECK_VALUE_TYPE (value, TYPE_SENSE));
#line 1 "../src/Libraries/Sense.vala"
	old = value->data[0].v_pointer;
#line 1 "../src/Libraries/Sense.vala"
	if (v_object) {
#line 1 "../src/Libraries/Sense.vala"
		g_return_if_fail (G_TYPE_CHECK_INSTANCE_TYPE (v_object, TYPE_SENSE));
#line 1 "../src/Libraries/Sense.vala"
		g_return_if_fail (g_value_type_compatible (G_TYPE_FROM_INSTANCE (v_object), G_VALUE_TYPE (value)));
#line 1 "../src/Libraries/Sense.vala"
		value->data[0].v_pointer = v_object;
#line 1061 "Sense.c"
	} else {
#line 1 "../src/Libraries/Sense.vala"
		value->data[0].v_pointer = NULL;
#line 1065 "Sense.c"
	}
#line 1 "../src/Libraries/Sense.vala"
	if (old) {
#line 1 "../src/Libraries/Sense.vala"
		sense_unref (old);
#line 1071 "Sense.c"
	}
}

static void
sense_class_init (SenseClass * klass,
                  gpointer klass_data)
{
#line 1 "../src/Libraries/Sense.vala"
	sense_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Libraries/Sense.vala"
	((SenseClass *) klass)->finalize = sense_finalize;
#line 1 "../src/Libraries/Sense.vala"
	g_type_class_adjust_private_offset (klass, &Sense_private_offset);
#line 1085 "Sense.c"
}

static void
sense_instance_init (Sense * self,
                     gpointer klass)
{
#line 1 "../src/Libraries/Sense.vala"
	self->priv = sense_get_instance_private (self);
#line 15 "../src/Libraries/Sense.vala"
	self->priv->totalTemperature = (gdouble) 0;
#line 16 "../src/Libraries/Sense.vala"
	self->priv->temperatureCounter = 1;
#line 1 "../src/Libraries/Sense.vala"
	self->ref_count = 1;
#line 1100 "Sense.c"
}

static void
sense_finalize (Sense * obj)
{
	Sense * self;
#line 1 "../src/Libraries/Sense.vala"
	self = G_TYPE_CHECK_INSTANCE_CAST (obj, TYPE_SENSE, Sense);
#line 1 "../src/Libraries/Sense.vala"
	g_signal_handlers_destroy (self);
#line 14 "../src/Libraries/Sense.vala"
	sense_temperature_destroy (&self->temperatureStruct);
#line 1113 "Sense.c"
}

static GType
sense_get_type_once (void)
{
	static const GTypeValueTable g_define_type_value_table = { value_sense_init, value_sense_free_value, value_sense_copy_value, value_sense_peek_pointer, "p", value_sense_collect_value, "p", value_sense_lcopy_value };
	static const GTypeInfo g_define_type_info = { sizeof (SenseClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) sense_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Sense), 0, (GInstanceInitFunc) sense_instance_init, &g_define_type_value_table };
	static const GTypeFundamentalInfo g_define_type_fundamental_info = { (G_TYPE_FLAG_CLASSED | G_TYPE_FLAG_INSTANTIATABLE | G_TYPE_FLAG_DERIVABLE | G_TYPE_FLAG_DEEP_DERIVABLE) };
	GType sense_type_id;
	sense_type_id = g_type_register_fundamental (g_type_fundamental_next (), "Sense", &g_define_type_info, &g_define_type_fundamental_info, 0);
	Sense_private_offset = g_type_add_instance_private (sense_type_id, sizeof (SensePrivate));
	return sense_type_id;
}

GType
sense_get_type (void)
{
	static volatile gsize sense_type_id__volatile = 0;
	if (g_once_init_enter (&sense_type_id__volatile)) {
		GType sense_type_id;
		sense_type_id = sense_get_type_once ();
		g_once_init_leave (&sense_type_id__volatile, sense_type_id);
	}
	return sense_type_id__volatile;
}

gpointer
sense_ref (gpointer instance)
{
	Sense * self;
	self = instance;
#line 1 "../src/Libraries/Sense.vala"
	g_atomic_int_inc (&self->ref_count);
#line 1 "../src/Libraries/Sense.vala"
	return instance;
#line 1149 "Sense.c"
}

void
sense_unref (gpointer instance)
{
	Sense * self;
	self = instance;
#line 1 "../src/Libraries/Sense.vala"
	if (g_atomic_int_dec_and_test (&self->ref_count)) {
#line 1 "../src/Libraries/Sense.vala"
		SENSE_GET_CLASS (self)->finalize (self);
#line 1 "../src/Libraries/Sense.vala"
		g_type_free_instance ((GTypeInstance *) self);
#line 1163 "Sense.c"
	}
}

