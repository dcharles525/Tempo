/* Tempo.c generated by valac 0.56.4, the Vala compiler
 * generated from Tempo.vala, do not modify */

#include <gtk/gtk.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <glib.h>
#include <gdk/gdk.h>
#include <stdlib.h>
#include <string.h>
#include <glib/gi18n-lib.h>

#if !defined(VALA_EXTERN)
#if defined(_MSC_VER)
#define VALA_EXTERN __declspec(dllexport) extern
#elif __GNUC__ >= 4
#define VALA_EXTERN __attribute__((visibility("default"))) extern
#else
#define VALA_EXTERN extern
#endif
#endif

#define TYPE_TEMPO (tempo_get_type ())
#define TEMPO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEMPO, Tempo))
#define TEMPO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEMPO, TempoClass))
#define IS_TEMPO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEMPO))
#define IS_TEMPO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEMPO))
#define TEMPO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEMPO, TempoClass))

typedef struct _Tempo Tempo;
typedef struct _TempoClass TempoClass;
typedef struct _TempoPrivate TempoPrivate;
enum  {
	TEMPO_0_PROPERTY,
	TEMPO_NUM_PROPERTIES
};
static GParamSpec* tempo_properties[TEMPO_NUM_PROPERTIES];
typedef struct _Block1Data Block1Data;
#define _g_object_unref0(var) ((var == NULL) ? NULL : (var = (g_object_unref (var), NULL)))
#define _g_error_free0(var) ((var == NULL) ? NULL : (var = (g_error_free (var), NULL)))
#define _g_free0(var) (var = (g_free (var), NULL))

#define TYPE_TEMP_TEXT (temp_text_get_type ())
#define TEMP_TEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TEMP_TEXT, TempText))
#define TEMP_TEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_TEMP_TEXT, TempTextClass))
#define IS_TEMP_TEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TEMP_TEXT))
#define IS_TEMP_TEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_TEMP_TEXT))
#define TEMP_TEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TEMP_TEXT, TempTextClass))

typedef struct _TempText TempText;
typedef struct _TempTextClass TempTextClass;
#define _g_variant_unref0(var) ((var == NULL) ? NULL : (var = (g_variant_unref (var), NULL)))

struct _Tempo {
	GtkApplication parent_instance;
	TempoPrivate * priv;
};

struct _TempoClass {
	GtkApplicationClass parent_class;
};

struct _Block1Data {
	int _ref_count_;
	Tempo* self;
	GSettings* settings;
	GtkApplicationWindow* mainWindow;
};

static gpointer tempo_parent_class = NULL;

VALA_EXTERN GType tempo_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Tempo, g_object_unref)
VALA_EXTERN Tempo* tempo_new (void);
VALA_EXTERN Tempo* tempo_construct (GType object_type);
static void tempo_real_activate (GApplication* base);
static Block1Data* block1_data_ref (Block1Data* _data1_);
static void block1_data_unref (void * _userdata_);
VALA_EXTERN GType temp_text_get_type (void) G_GNUC_CONST ;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (TempText, g_object_unref)
VALA_EXTERN TempText* temp_text_new (void);
VALA_EXTERN TempText* temp_text_construct (GType object_type);
VALA_EXTERN GtkBox* temp_text_get_box (TempText* self);
static gboolean __lambda5_ (Block1Data* _data1_);
static GVariant* _variant_new1 (gint value);
static GVariant* _variant_new2 (gint value);
static gboolean ___lambda5__gtk_widget_configure_event (GtkWidget* _sender,
                                                 GdkEventConfigure* event,
                                                 gpointer self);
static gint tempo_main (gchar** args,
                 gint args_length1);
static GType tempo_get_type_once (void);

Tempo*
tempo_construct (GType object_type)
{
	Tempo * self = NULL;
#line 5 "../src/Tempo.vala"
	self = (Tempo*) g_object_new (object_type, "application-id", "com.github.dcharles525.tempo", "flags", G_APPLICATION_FLAGS_NONE, NULL);
#line 3 "../src/Tempo.vala"
	return self;
#line 103 "Tempo.c"
}

Tempo*
tempo_new (void)
{
#line 3 "../src/Tempo.vala"
	return tempo_construct (TYPE_TEMPO);
#line 111 "Tempo.c"
}

static Block1Data*
block1_data_ref (Block1Data* _data1_)
{
#line 12 "../src/Tempo.vala"
	g_atomic_int_inc (&_data1_->_ref_count_);
#line 12 "../src/Tempo.vala"
	return _data1_;
#line 121 "Tempo.c"
}

static void
block1_data_unref (void * _userdata_)
{
	Block1Data* _data1_;
	_data1_ = (Block1Data*) _userdata_;
#line 12 "../src/Tempo.vala"
	if (g_atomic_int_dec_and_test (&_data1_->_ref_count_)) {
#line 131 "Tempo.c"
		Tempo* self;
#line 12 "../src/Tempo.vala"
		self = _data1_->self;
#line 12 "../src/Tempo.vala"
		_g_object_unref0 (_data1_->mainWindow);
#line 12 "../src/Tempo.vala"
		_g_object_unref0 (_data1_->settings);
#line 12 "../src/Tempo.vala"
		_g_object_unref0 (self);
#line 12 "../src/Tempo.vala"
		g_slice_free (Block1Data, _data1_);
#line 143 "Tempo.c"
	}
}

static gpointer
_g_object_ref0 (gpointer self)
{
#line 43 "../src/Tempo.vala"
	return self ? g_object_ref (self) : NULL;
#line 152 "Tempo.c"
}

static GVariant*
_variant_new1 (gint value)
{
#line 67 "../src/Tempo.vala"
	return g_variant_ref_sink (g_variant_new_int32 (value));
#line 160 "Tempo.c"
}

static GVariant*
_variant_new2 (gint value)
{
#line 68 "../src/Tempo.vala"
	return g_variant_ref_sink (g_variant_new_int32 (value));
#line 168 "Tempo.c"
}

static gboolean
__lambda5_ (Block1Data* _data1_)
{
	Tempo* self;
	gint x = 0;
	gint y = 0;
	gint _tmp0_ = 0;
	gint _tmp1_ = 0;
	GVariant* _tmp2_;
	GVariant* _tmp3_;
	gboolean result;
#line 63 "../src/Tempo.vala"
	self = _data1_->self;
#line 66 "../src/Tempo.vala"
	gtk_window_get_position ((GtkWindow*) _data1_->mainWindow, &_tmp0_, &_tmp1_);
#line 66 "../src/Tempo.vala"
	x = _tmp0_;
#line 66 "../src/Tempo.vala"
	y = _tmp1_;
#line 67 "../src/Tempo.vala"
	_tmp2_ = _variant_new1 (x);
#line 67 "../src/Tempo.vala"
	g_settings_set_value (_data1_->settings, "x", _tmp2_);
#line 67 "../src/Tempo.vala"
	_g_variant_unref0 (_tmp2_);
#line 68 "../src/Tempo.vala"
	_tmp3_ = _variant_new2 (y);
#line 68 "../src/Tempo.vala"
	g_settings_set_value (_data1_->settings, "y", _tmp3_);
#line 68 "../src/Tempo.vala"
	_g_variant_unref0 (_tmp3_);
#line 69 "../src/Tempo.vala"
	result = FALSE;
#line 69 "../src/Tempo.vala"
	return result;
#line 206 "Tempo.c"
}

static gboolean
___lambda5__gtk_widget_configure_event (GtkWidget* _sender,
                                        GdkEventConfigure* event,
                                        gpointer self)
{
	gboolean result;
	result = __lambda5_ (self);
#line 63 "../src/Tempo.vala"
	return result;
#line 218 "Tempo.c"
}

static void
tempo_real_activate (GApplication* base)
{
	Tempo * self;
	Block1Data* _data1_;
	GSettings* _tmp0_;
	GtkCssProvider* cssProvider = NULL;
	GtkCssProvider* _tmp1_;
	GtkSettings* _tmp2_;
	GtkHeaderBar* headerbar = NULL;
	gchar* _tmp6_;
	GtkHeaderBar* _tmp7_ = NULL;
	GtkStyleContext* headerContext = NULL;
	GtkStyleContext* _tmp8_;
	GtkStyleContext* _tmp9_;
	gchar* _tmp10_;
	GtkApplicationWindow* _tmp11_ = NULL;
	TempText* tempText = NULL;
	TempText* _tmp12_;
	GtkBox* _tmp13_;
	GtkBox* _tmp14_;
	GVariant* _tmp15_;
	GVariant* _tmp16_;
	GVariant* _tmp17_;
	GVariant* _tmp18_;
	GError* _inner_error0_ = NULL;
#line 12 "../src/Tempo.vala"
	self = (Tempo*) base;
#line 12 "../src/Tempo.vala"
	_data1_ = g_slice_new0 (Block1Data);
#line 12 "../src/Tempo.vala"
	_data1_->_ref_count_ = 1;
#line 12 "../src/Tempo.vala"
	_data1_->self = g_object_ref (self);
#line 14 "../src/Tempo.vala"
	_tmp0_ = g_settings_new ("com.github.dcharles525.tempo");
#line 14 "../src/Tempo.vala"
	_data1_->settings = _tmp0_;
#line 17 "../src/Tempo.vala"
	_tmp1_ = gtk_css_provider_new ();
#line 17 "../src/Tempo.vala"
	cssProvider = _tmp1_;
#line 19 "../src/Tempo.vala"
	_tmp2_ = gtk_settings_get_default ();
#line 19 "../src/Tempo.vala"
	g_object_set ((GObject*) _tmp2_, "gtk-application-prefer-dark-theme", TRUE, NULL);
#line 267 "Tempo.c"
	{
		GdkScreen* _tmp3_;
#line 26 "../src/Tempo.vala"
		gtk_css_provider_load_from_resource (cssProvider, "style.css");
#line 27 "../src/Tempo.vala"
		_tmp3_ = gdk_screen_get_default ();
#line 27 "../src/Tempo.vala"
		gtk_style_context_add_provider_for_screen (_tmp3_, (GtkStyleProvider*) cssProvider, (guint) GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
#line 276 "Tempo.c"
	}
	goto __finally0;
	__catch0_g_error:
	{
		GError* e = NULL;
		GError* _tmp4_;
		const gchar* _tmp5_;
#line 24 "../src/Tempo.vala"
		e = _inner_error0_;
#line 24 "../src/Tempo.vala"
		_inner_error0_ = NULL;
#line 35 "../src/Tempo.vala"
		_tmp4_ = e;
#line 35 "../src/Tempo.vala"
		_tmp5_ = _tmp4_->message;
#line 35 "../src/Tempo.vala"
		g_error ("Tempo.vala:35: Cannot load CSS stylesheet: %s", _tmp5_);
#line 24 "../src/Tempo.vala"
		_g_error_free0 (e);
#line 296 "Tempo.c"
	}
	__finally0:
#line 24 "../src/Tempo.vala"
	if (G_UNLIKELY (_inner_error0_ != NULL)) {
#line 24 "../src/Tempo.vala"
		_g_object_unref0 (cssProvider);
#line 24 "../src/Tempo.vala"
		block1_data_unref (_data1_);
#line 24 "../src/Tempo.vala"
		_data1_ = NULL;
#line 24 "../src/Tempo.vala"
		g_critical ("file %s: line %d: uncaught error: %s (%s, %d)", __FILE__, __LINE__, _inner_error0_->message, g_quark_to_string (_inner_error0_->domain), _inner_error0_->code);
#line 24 "../src/Tempo.vala"
		g_clear_error (&_inner_error0_);
#line 24 "../src/Tempo.vala"
		return;
#line 313 "Tempo.c"
	}
#line 39 "../src/Tempo.vala"
	_tmp6_ = g_strdup ("Tempo");
#line 39 "../src/Tempo.vala"
	_tmp7_ = (GtkHeaderBar*) gtk_header_bar_new ();
#line 39 "../src/Tempo.vala"
	gtk_header_bar_set_title (_tmp7_, _tmp6_);
#line 39 "../src/Tempo.vala"
	_g_free0 (_tmp6_);
#line 39 "../src/Tempo.vala"
	g_object_ref_sink (_tmp7_);
#line 39 "../src/Tempo.vala"
	headerbar = _tmp7_;
#line 43 "../src/Tempo.vala"
	_tmp8_ = gtk_widget_get_style_context ((GtkWidget*) headerbar);
#line 43 "../src/Tempo.vala"
	_tmp9_ = _g_object_ref0 (_tmp8_);
#line 43 "../src/Tempo.vala"
	headerContext = _tmp9_;
#line 44 "../src/Tempo.vala"
	gtk_style_context_add_class (headerContext, GTK_STYLE_CLASS_FLAT);
#line 46 "../src/Tempo.vala"
	_tmp10_ = g_strdup (_ ("Tempo"));
#line 46 "../src/Tempo.vala"
	_tmp11_ = (GtkApplicationWindow*) gtk_application_window_new ((GtkApplication*) self);
#line 46 "../src/Tempo.vala"
	g_object_set ((GtkWindow*) _tmp11_, "default-height", 200, NULL);
#line 46 "../src/Tempo.vala"
	g_object_set ((GtkWindow*) _tmp11_, "default-width", 200, NULL);
#line 46 "../src/Tempo.vala"
	gtk_window_set_title ((GtkWindow*) _tmp11_, _tmp10_);
#line 46 "../src/Tempo.vala"
	_g_free0 (_tmp10_);
#line 46 "../src/Tempo.vala"
	gtk_window_set_resizable ((GtkWindow*) _tmp11_, FALSE);
#line 46 "../src/Tempo.vala"
	g_object_ref_sink (_tmp11_);
#line 46 "../src/Tempo.vala"
	_data1_->mainWindow = _tmp11_;
#line 53 "../src/Tempo.vala"
	_tmp12_ = temp_text_new ();
#line 53 "../src/Tempo.vala"
	g_object_ref_sink (_tmp12_);
#line 53 "../src/Tempo.vala"
	tempText = _tmp12_;
#line 55 "../src/Tempo.vala"
	gtk_window_set_titlebar ((GtkWindow*) _data1_->mainWindow, (GtkWidget*) headerbar);
#line 56 "../src/Tempo.vala"
	_tmp13_ = temp_text_get_box (tempText);
#line 56 "../src/Tempo.vala"
	_tmp14_ = _tmp13_;
#line 56 "../src/Tempo.vala"
	gtk_container_add ((GtkContainer*) _data1_->mainWindow, (GtkWidget*) _tmp14_);
#line 56 "../src/Tempo.vala"
	_g_object_unref0 (_tmp14_);
#line 57 "../src/Tempo.vala"
	_tmp15_ = g_settings_get_value (_data1_->settings, "x");
#line 57 "../src/Tempo.vala"
	_tmp16_ = _tmp15_;
#line 57 "../src/Tempo.vala"
	_tmp17_ = g_settings_get_value (_data1_->settings, "y");
#line 57 "../src/Tempo.vala"
	_tmp18_ = _tmp17_;
#line 57 "../src/Tempo.vala"
	gtk_window_move ((GtkWindow*) _data1_->mainWindow, (gint) g_variant_get_int32 (_tmp16_), (gint) g_variant_get_int32 (_tmp18_));
#line 57 "../src/Tempo.vala"
	_g_variant_unref0 (_tmp18_);
#line 57 "../src/Tempo.vala"
	_g_variant_unref0 (_tmp16_);
#line 61 "../src/Tempo.vala"
	gtk_widget_show_all ((GtkWidget*) _data1_->mainWindow);
#line 62 "../src/Tempo.vala"
	gtk_window_set_keep_above ((GtkWindow*) _data1_->mainWindow, TRUE);
#line 63 "../src/Tempo.vala"
	g_signal_connect_data ((GtkWidget*) _data1_->mainWindow, "configure-event", (GCallback) ___lambda5__gtk_widget_configure_event, block1_data_ref (_data1_), (GClosureNotify) block1_data_unref, 0);
#line 12 "../src/Tempo.vala"
	_g_object_unref0 (tempText);
#line 12 "../src/Tempo.vala"
	_g_object_unref0 (headerContext);
#line 12 "../src/Tempo.vala"
	_g_object_unref0 (headerbar);
#line 12 "../src/Tempo.vala"
	_g_object_unref0 (cssProvider);
#line 12 "../src/Tempo.vala"
	block1_data_unref (_data1_);
#line 12 "../src/Tempo.vala"
	_data1_ = NULL;
#line 401 "Tempo.c"
}

static gint
tempo_main (gchar** args,
            gint args_length1)
{
	Tempo* _tmp0_;
	Tempo* _tmp1_;
	gint _tmp2_;
	gint result;
#line 77 "../src/Tempo.vala"
	_tmp0_ = tempo_new ();
#line 77 "../src/Tempo.vala"
	_tmp1_ = _tmp0_;
#line 77 "../src/Tempo.vala"
	_tmp2_ = g_application_run ((GApplication*) _tmp1_, (gint) args_length1, args);
#line 77 "../src/Tempo.vala"
	_g_object_unref0 (_tmp1_);
#line 77 "../src/Tempo.vala"
	result = _tmp2_;
#line 77 "../src/Tempo.vala"
	return result;
#line 424 "Tempo.c"
}

int
main (int argc,
      char ** argv)
{
#line 75 "../src/Tempo.vala"
	return tempo_main (argv, argc);
#line 433 "Tempo.c"
}

static void
tempo_class_init (TempoClass * klass,
                  gpointer klass_data)
{
#line 1 "../src/Tempo.vala"
	tempo_parent_class = g_type_class_peek_parent (klass);
#line 1 "../src/Tempo.vala"
	((GApplicationClass *) klass)->activate = (void (*) (GApplication*)) tempo_real_activate;
#line 444 "Tempo.c"
}

static void
tempo_instance_init (Tempo * self,
                     gpointer klass)
{
}

static GType
tempo_get_type_once (void)
{
	static const GTypeInfo g_define_type_info = { sizeof (TempoClass), (GBaseInitFunc) NULL, (GBaseFinalizeFunc) NULL, (GClassInitFunc) tempo_class_init, (GClassFinalizeFunc) NULL, NULL, sizeof (Tempo), 0, (GInstanceInitFunc) tempo_instance_init, NULL };
	GType tempo_type_id;
	tempo_type_id = g_type_register_static (gtk_application_get_type (), "Tempo", &g_define_type_info, 0);
	return tempo_type_id;
}

GType
tempo_get_type (void)
{
	static volatile gsize tempo_type_id__once = 0;
	if (g_once_init_enter (&tempo_type_id__once)) {
		GType tempo_type_id;
		tempo_type_id = tempo_get_type_once ();
		g_once_init_leave (&tempo_type_id__once, tempo_type_id);
	}
	return tempo_type_id__once;
}

